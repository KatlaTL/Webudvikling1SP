<div class="container">
    <div class="row">
        <div class="col-md-8 mb-3">
            <div class="box box-left border card text-white mb-3">
                <div class="card-header">Feature requests</div>
                <div class="card-header" id="comment-header">Feature request comments</div>
                <div class="card-body bg-white">
                    <div class="FeaureRequest">
                        <div class="row">
                            <div id="requestcomment" class="section with-scroll">
                                <div class="scroll-box-feature">
                                    <!-- Feature Requests html will go here once the data has been fetched from the server -->
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="commentsShow">
                        <button id="backBtnComments">Back</button>
                        <% if(featureRequests) { %>
                            <div>
                                <h5 class="commenttitle">
                                    <%= featureRequests[0].title %>
                                </h5>
                            </div>
                            <div class="status">
                                <h7>Placeholder</h7>
                            </div>
                            <div>
                                <p class="commenttekst">
                                    <%= featureRequests[0].description %>
                                </p>
                            </div>

                            <% } %>
                                <div>
                                    <p class="commentsUnderTitel">Comments:</h3>
                                </div>
                                <div id="commentsDiv">

                            </div>
                            <div class="commentFormDiv">
                                <form action="" id="commentForm">
                                    <input type="text" name="comment" id="comment" placeholder="Write your comment here">
                                    <input type="submit" value="Submit" id="submit">
                                </form>
                            </div>
                        </div>
                </div>
            </div>
        </div>
        <!-- Including the roadmap -->
        <%- include("../partials/roadmap.ejs") %>
    </div>
</div>

<script>
    fetchWrapper.get("/featureRequests")
    .then(res => {
        const requests = res.featureRequests;
        const requestsDiv = document.querySelector(".scroll-box-feature");
        let requestHtml = "";

        for (let i = 0; i < requests.length; i++) {
            const parseDate = Date.parse(requests[i].createdAt);
            const date = new Date(parseDate);
            requestHtml += `
                <div class="feature-request" data-requestid=${requests[i].id}>
                    <div>
                        <h5 class="commenttitle">${requests[i].title}</h5>
                    </div>
                    <div class="status">
                        <h7>${requests[i].status}</h7>
                    </div>
                    <div class="row">
                        <div class="col-md 10 request-click">
                            <p class="commenttekst">${requests[i].description}</p>
                            <div class="row">
                                <div class="col-md-3">
                                    <p class="commenttekst">${date.toLocaleDateString()}</p>
                                </div>
                                <div class="col-md-3"> <button class="comment" type="button">
                                        <span><i><svg xmlns="http://www.w3.org/2000/svg" width="20"
                                                    height="20" fill="currentColor" class="bi bi-chat"
                                                    viewBox="0 0 16 16">
                                                    <path
                                                        d="M2.678 11.894a1 1 0 0 1 .287.801 10.97 10.97 0 0 1-.398 2c1.395-.323 2.247-.697 2.634-.893a1 1 0 0 1 .71-.074A8.06 8.06 0 0 0 8 14c3.996 0 7-2.807 7-6 0-3.192-3.004-6-7-6S1 4.808 1 8c0 1.468.617 2.83 1.678 3.894zm-.493 3.905a21.682 21.682 0 0 1-.713.129c-.2.032-.352-.176-.273-.362a9.68 9.68 0 0 0 .244-.637l.003-.01c.248-.72.45-1.548.524-2.319C.743 11.37 0 9.76 0 8c0-3.866 3.582-7 8-7s8 3.134 8 7-3.582 7-8 7a9.06 9.06 0 0 1-2.347-.306c-.52.263-1.639.742-3.468 1.105z" />
                                                </svg></i></span>
                                        <span class="btn-inner-text">${requests[i].commentCount}</span>
                                    </button></div>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <button class="upvote-cta btn mr-2 mb-2 btn-pill btn-icon btn-outline-primary">
                                <span><i>â†‘</i></span>
                                <p>${requests[i].upvotes}</p>
                            </button>
                        </div>
                    </div>
                </div>`
        }

        requestsDiv.innerHTML = requestHtml;
    })
    .then(() => {
        const upvoteCTA = document.querySelectorAll(".upvote-cta");

        upvoteCTA.forEach((cta) => {
            cta.addEventListener("click", (e) => {
                e.preventDefault();
                const request = cta.closest(".feature-request");
                const requestId = request.dataset.requestid;

                if (requestId) {
                    fetchWrapper.put(`/featureRequests/${requestId}/upvotes`, {
                        headers: {
                            "Authorization": `Bearer ${JSON.parse(localStorage.getItem("user")).jwt}`
                        }
                    })
                        .then(data => cta.querySelector("p").innerHTML = data.amount)
                        .catch(err => console.error(err));
                }
            })
        });

        const featureRequest = document.querySelectorAll(".request-click");

        featureRequest.forEach((x) => {
            x.addEventListener('click', function (e) {
                e.preventDefault();
                toggleCommentsShow();

            })
        });

        function toggleCommentsShow() {
            let showFeatures = document.querySelector(".FeaureRequest");
            let commentShow = document.querySelector(".commentsShow");
            let featureHeader = document.querySelector(".card-header");
            let commentHeader = document.querySelector("#comment-header");

            if (showFeatures.style.display === 'none') {
                showFeatures.style.display = 'block';
                commentShow.style.display = 'none';
                commentHeader.style.display = 'none';
                featureHeader.style.display = 'block';
            } else {
                showFeatures.style.display = 'none';
                commentShow.style.display = 'block';
                commentHeader.style.display = 'block';
                featureHeader.style.display = 'none';
            }
        };


        document.querySelector("#backBtnComments").addEventListener("click", (e) => {
            e.preventDefault();
            toggleCommentsShow();

        });
    })


    fetch("/comments")
    .then((res)=> res.json())
    .then((data)=>{
    
    let outerDiv = document.querySelector('#commentsDiv');

    console.log(data.Comments.length);
     
    for (let i = 0; i < data.Comments.length; i++) {
        let innerDiv = document.createElement("div");
        outerDiv.appendChild(innerDiv);

                let pTag = document.createElement("p");
                innerDiv.appendChild(pTag);

                let comments = JSON.stringify(data.Comments[i].comment);
                let userName = JSON.stringify(data.userName[i]);

                let newStrComments = comments.replace(/"/g, '');
                let newStrUserName = userName.replace(/"/g, '');

                /* appender dataen til html'en */
                pTag.innerHTML += newStrComments + "<br>";
                pTag.innerHTML += "Written by: " + newStrUserName + "<br>";

    };

        })
        .catch((err) => {
            console.log("error occured", err)
        });

    let commentFormData = document.querySelector("#commentForm");
    commentFormData.addEventListener("submit",  (e) => {
        e.preventDefault();
        if (comment.value == "") {
            alert("Ensure you input a value in the field!");

        } else {
            alert("This form has been successfully submitted!");

            let commentData = comment.value;

            let formData = { commentData };

            fetch("/comments/postcomments/posted", {
                method: "POST",
                body: JSON.stringify(formData),
                headers: {
                    "Authorization": `Bearer ${localStorage.getItem("user") ? JSON.parse(localStorage.getItem("user")).jwt : ""}`,
                    'Content-Type': 'application/json'
                }   
            });
        }
    });

</script>